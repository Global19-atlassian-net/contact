#!/bin/bash
help(){
    printf 'Syntax:
    contact [COMMAND] [NAME] [PROPERTY]
    Commands:
    add: Add new contact
    edit: Edit existing contact
    delete: Delete contact
    get: Get property of contact (default)
    git: Interact with the git repositry directly
        Example: `contact git status`
        To enable the git repository features of contact you need to run:
            `contact git init`
        If you already have contacts you need to manually commit them:
            `contact git add --all;contact git commit -m "Commit all existing contacts"`
    help: Show this message
    mutt-aliases: Export as mutt aliases.
    vcf-export: Export as .vcf file.
    rename-all: Rename all files to the correct name
'
}
error(){
    case $1 in
        64)
            msg="No matching contact"
            ;;
        65)
            msg="Please specify name (name=Max Muster)"
            ;;
        66)
            msg="Contact already exists"
            ;;
        67)
            msg="No contacts in storage. Add a contact first"
    esac
    >&2 echo "Error: $msg"
    exit $1
}
getprop(){
    if [ -n "$2" ];then
        val=$(cat "$1" | fzf -e -f "$2=")
    else
        val=$(cat "$1" | fzf)
    fi
    val=${val#*=}
    echo "$val"
}
getfile(){
    if [ -z "$(ls -A)" ];then
        error 67
    fi
    files=$(for f in *;do printf "%s: %s\n" "$f" "$(sed ':a;N;$!ba;s/\n/; /g' "$f")";done)
    if [ -n "$1" ];then
        ret=$(echo "$files" | fzf -f "$1")
        file=$(echo "$ret" |head -n1)
    else
        file=$(echo "$files" | fzf)
    fi
    file=$(echo "$file"|cut -d":" -f1)
    if [ ! -f "$file" ];then
        error 64
    fi
    echo "$file"
}
edit(){
    file="$1"
    if [ -n "$EDITOR" ];then
        $EDITOR "$file"
    else
        vi "$file";
    fi
    filter "$file"
    rename "$file"
}
filter(){
    file="$1"
    sed '/^$/d' -i "$file"
}
rename(){
    file="$1"
    filter "$file"
    name=$(getprop "$file" "name")
    if [ -z "$name" ];then
        error 65
    fi
    if [ "$cdir/$name" != "$file" ];then
        if [ -f "$name" ];then
            error 66
        fi
        mv "$file" "$name"
        if [ -d ".git" ];then
            git rm "$file" >/dev/null 2>&1||:
        fi
    fi
    if [ -d ".git" ];then
        git add "$name" ||:
        git commit -m "Updated $name" >/dev/null 2>&1 ||:
    fi
}
delete(){
    file="$1"
    rm "$file"
    if [ -d ".git" ];then
        git rm "$file" >/dev/null ||:
        git commit -m "Deleted $file" >/dev/null 2>&1 ||:
    fi
}

mutt-aliases(){
for f in *;do
    name=$(getprop "$f" "name")
    mail=$(getprop "$f" "email")
    if [ -n "$mail" ];then
        nick=$(getprop "$f" "nick")
        if [ -z "$nick" ];then
            nick="$name"
        fi
        nick=$(echo "$nick"|cut -d" " -f1)
        nick="${nick,,}"
        printf "alias %s %s <%s>\n" "$nick" "$name" "$mail"
    fi
done
}

vcf-export(){
for f in *;do
    name=$(getprop "$f" "name")
    lastname=$(echo "$name"|rev|cut -d' ' -f1|rev);
    firstname=$(echo "$name"|cut -d' ' -f1);
    mail=$(getprop "$f" "email")
    cell=$(getprop "$f" "mobile")
    work=$(getprop "$f" "work")
    unix2dos<<- EOF
BEGIN:VCARD
VERSION:3.0
N:$lastname;$firstname;;;
FN:$name
TEL;TYPE=CELL:$cell
TEL;TYPE=WORK:$work
EMAIL;TYPE=INTERNET;TYPE=PREF;TYPE=HOME:$mail
END:VCARD

EOF
done
}


set -e
cdir=$HOME/.contacts
mkdir -p "$cdir"
cd "$cdir"
command="$1"
if [ "$command" = "add" ];then
    tmp=$(mktemp)
    edit "$tmp"
elif [ "$command" = "edit" ];then
    file=$(getfile "$2")
    edit "$cdir/$file"
elif [ "$command" = "delete" ];then
    file=$(getfile "$2")
    delete "$file"
elif [ "$command" = "getfile" ];then
    file=$(getfile "$2")
    echo "$file"
elif [ "$command" = "rename-all" ];then
    for f in *;do
        rename "$cdir/$f"
    done
elif [ "$command" = "vcf-export" ];then
    vcf-export
elif [ "$command" = "mutt-aliases" ];then
    mutt-aliases
elif [ "$command" = "git" ];then
    "$@"
elif [ "$command" = "help" ];then
    help
elif [ "$command" = "get" ];then
    file=$(getfile "$2")
    property=$(getprop "$file" "$3")
    echo "$property"
elif [ "$command" = "" ];then
    file=$(getfile)
    property=$(getprop "$file")
    echo "$property"
else
    help
fi

